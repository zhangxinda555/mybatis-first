
1.mybatis的动态sql是做什么的？都有哪些动态sql？简述一下动态sql的执行原理

   答：mybatis的动态sql是为了处理一些复杂的业务场景，当简单的标签不能满足需求时，
          我们需要通过动态的拼接sql的方式处理业务。
          
          动态sql的标签有很多例如：<where> <if> <when> <choose> <foreach> <trim>等
          
          动态sql其本质上还是通过读取其标签和文本进行sql拼接，最后将参数和sql语句封装成BoundSql
          这个对象中，成为可以真正被执行的sql语句

2.mybatis是否支持延迟加载？如果支持，它的实现原理是什么？

   答：mybatis支持延迟加载，它的实现原理是使用动态代理的方式拦截返回的结果的类的get方法，如果
          发现是null就会去执行事先保存好的sql去获取值再set到所需要查询的关联的对象中

3.mybatis都有哪些executor执行器？它们之间的区别是什么？

   答：有StatementHandler、ResultSetHandler、ParameterHandler、TypeHandler
          StatementHandler主要是执行JDBC的Statement操作，包括设置参数，返回结果集
          ParameterHandler主要是做JDBC操作时需要设置的sql参数
          ResultSetHandler主要是做JDBC操作时封装结果集的操作
          TypeHandler主要是负责JAVA对象和JDBC数据类型之间的映射

4.简述下Mybatis的一级、二级缓存（分别从存储结构、范围、失效场景。三个方面来作答）？

   答：一级缓存：mybatis自动的带有，存储结构是一个内部维护的Map集合，主要是在一个SqlSession的作用范围内有效，
          如果执行了增删改操作，也会失效，会重新执行sql语句的查询

          二级缓存：需要手动启用，存储结构也是Map的集合，当然我们可以通过其内部的动态代理的添加其他的实现方式
         主要是实现Cache这个接口，二级缓存的作用范围是当前的Mapper，如果进行增删改或者不是一个Mapper就会失效

5.简述Mybatis的插件运行原理，以及如何编写一个插件？

   答：Mybatis的插件的运行原理是使用了动态代理的方式，对实现了Interceptor的接口的方法进行拦截。
          如果要编写一个插件，首先需要实现Mybatise的Interceptor接口，然后在实现类上加入@Interceptors和@Signature的注解
          进行配置，我们还可以决定是对那些Executor的组件（主要是StatementHandler、ParameterHandler、ResultSetHandler）
          进行拦截，最后我们还需要在sqlMapperConfig.xml中进行plugin的配置

